"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Lint = _interopRequireWildcard(require("../Lint"));

var _Versioning = _interopRequireWildcard(require("../Versioning"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function getName(node) {
  switch (node.type) {
    case 'NewExpression':
      {
        return node.callee.name;
      }

    case 'MemberExpression':
      {
        return node.object.name;
      }

    case 'CallExpression':
      {
        return node.callee.name;
      }

    default:
      throw new Error('not found');
  }
}

var _default = {
  meta: {
    docs: {
      description: 'Ensure cross-browser API compatibility',
      category: 'Compatibility',
      url: 'https://github.com/amilajack/eslint-plugin-compat/blob/master/docs/rules/compat.md',
      recommended: true
    },
    fixable: 'code',
    schema: []
  },

  create(context) {
    // Determine lowest targets from browserslist config, which reads user's
    // package.json config section. Use config from eslintrc for testing purposes
    const browserslistConfig = context.settings.browsers || context.settings.targets || context.options[0];
    const browserslistTargets = (0, _Versioning.Versioning)((0, _Versioning.default)(context.getFilename(), browserslistConfig));
    const errors = [];

    function lint(node) {
      const {
        isValid,
        rule,
        unsupportedTargets
      } = (0, _Lint.default)(node, browserslistTargets, new Set(context.settings.polyfills || []));

      if (!isValid) {
        errors.push({
          node,
          message: [(0, _Lint.generateErrorName)(rule), 'is not supported in', unsupportedTargets.join(', ')].join(' ')
        });
      }
    }

    const identifiers = new Set();
    return {
      CallExpression: lint,
      MemberExpression: lint,
      NewExpression: lint,

      // Keep track of all the defined variables. Do not report errors for nodes that are not defined
      Identifier(node) {
        if (node.parent) {
          const {
            type
          } = node.parent;

          if ( // ex. const { Set } = require('immutable');
          type === 'Property' || // ex. function Set() {}
          type === 'FunctionDeclaration' || // ex. const Set = () => {}
          type === 'VariableDeclarator' || // ex. class Set {}
          type === 'ClassDeclaration' || // ex. import Set from 'set';
          type === 'ImportDefaultSpecifier' || // ex. import {Set} from 'set';
          type === 'ImportSpecifier' || // ex. import {Set} from 'set';
          type === 'ImportDeclaration') {
            identifiers.add(node.name);
          }
        }
      },

      'Program:exit': () => {
        // Get a map of all the variables defined in the root scope (not the global scope)
        // const variablesMap = context.getScope().childScopes.map(e => e.set)[0];
        errors.filter(error => !identifiers.has(getName(error.node))).forEach(node => context.report(node));
      }
    };
  }

};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,